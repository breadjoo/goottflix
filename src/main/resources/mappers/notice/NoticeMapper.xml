<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.goottflix.movie.mapper.MovieMapper">
    <select id="findById" resultType="Movie">
        select * from movies where id=#{id}
    </select>

    <select id="findAll" resultType="Movie">
        select * from movies
    </select>

    <select id="findByRecommendedGenre" resultType="Movie">
        select * from movies where genre like #{genre} order by rating desc
    </select>

    <insert id="save">
        insert into movies(title, intro, description, release_date, rating, genre, director, poster_url, nation, video_url)
        values(#{title},#{intro}, #{description}, #{releaseDate}, #{rating}, #{genre}, #{director}, #{posterUrl}, #{nation}, #{videoUrl})
    </insert>

    <update id="update">
        update movies set title=#{title}, description=#{description}, release_date=#{releaseDate}, intro = #{intro},
                          rating=#{rating}, genre=#{genre}, director=#{director}, poster_url=#{posterUrl}, video_url=#{videoUrl}, nation = #{nation}
                      where id=#{id}
    </update>

    <delete id="delete">
        delete from movies where id=#{id}
    </delete>

    <select id="getMoviesWithPage" resultType="Movie">
        SELECT * FROM movies
        ORDER BY id
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="getTotalMovieCount" resultType="int">
        SELECT COUNT(*) FROM movies
    </select>

    <select id="getFilteredMovies" resultType="Movie">
        SELECT * FROM movies
        <trim prefix="WHERE" prefixOverrides="AND">
            <if test="genre != null and genre != ''">
                genre LIKE CONCAT('%', #{genre}, '%')
            </if>
            <if test="nation != null and nation != ''">
                AND nation LIKE CONCAT('%', #{nation}, '%')
            </if>
            <if test="director != null and director != ''">
                AND director LIKE CONCAT('%', #{director}, '%')
            </if>
        </trim>
        ORDER BY
        <choose>
            <when test="sortBy == 'rating'"> rating DESC </when>
            <when test="sortBy == 'title'"> title ASC </when>
            <when test="sortBy == 'release_date'"> release_date DESC </when>
        </choose>
    </select>

    <select id="getReviewMoviesByUserId" parameterType="Long" resultType="ReviewMovie">
        SELECT m.id movie_id, m.title, m.release_date, m.rating, m.genre, m.director, m.poster_url, m.nation,
               r.rating my_rating, r.review_date, u.username
        FROM review r
        JOIN movies m ON r.movie_id = m.id
        JOIN user u ON r.user_id = u.id
        WHERE r.user_id = #{userId}
    </select>

    <select id="getCommentMoviesByUserId" parameterType="Long" resultType="CommentMovie">
        SELECT m.id movie_id, m.title, m.release_date, m.genre, m.poster_url, r.review, r.recommend,
               r.spoiler, r.rating my_rating, r.review_date, u.username
        FROM review r
        JOIN movies m ON r.movie_id = m.id
        JOIN user u ON r.user_id = u.id
        WHERE r.user_id = #{userId} and r.review IS NOT NULL;
    </select>

    <select id="getLikeMoviesWithFriends" parameterType="map" resultType="LikeMovie">
        SELECT  m.id AS movie_id, m.title, m.release_date,  m.rating,
                m.genre, m.director, m.poster_url, m.nation,
                r.rating AS my_rating,
                rf.rating AS friend_rating
        FROM review r
        JOIN movies m ON r.movie_id = m.id
        JOIN user u ON r.user_id = u.id
        JOIN review rf ON rf.movie_id = m.id AND rf.user_id = #{friendId}
        JOIN user uf ON rf.user_id = uf.id
        WHERE r.user_id = #{userId}
          AND r.rating >= 4
          AND rf.rating >= 4;
    </select>


</mapper>