<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.goottflix.review.mapper.ReviewMapper">

    <insert id="save">
        insert into review(user_id, movie_id, rating, review) values(#{userId}, #{movieId}, #{rating}, #{review})
    </insert>

    <select id="findByMovieId" resultType="Review">
        select * from review where movie_id=#{movieId}
    </select>

    <select id="findByUserIdAndMovieId" parameterType="map" resultType="Review">
        select * from review where movie_id=#{movieId} and user_id=#{userId}
    </select>

    <select id="findById" resultType="Review">
        select * from review where id=#{id}
    </select>

    <select id="findByRecommendedUserId" resultType="Review">
        select * from review where user_id=#{userId}
    </select>

    <update id="update">
        update review set rating=#{rating}, review=#{review}, recommend=#{recommend} where id=#{id}
    </update>

    <delete id="delete">
        delete from review where id=#{id}
    </delete>

    <insert id="likesSave" parameterType="map">
        insert into likes(review_id, user_id) values (#{reviewId}, #{userId})
    </insert>

    <select id="findByReviewIdAndUserId" parameterType="map" resultType="Likes">
        select * from likes where review_id=#{reviewId} and user_id=#{userId}
    </select>

    <delete id="likesDelete" parameterType="map">
        delete from likes where review_id=#{reviewId} and user_id=#{userId}
    </delete>

    <update id="declaration" parameterType="map">
        update review set spoiler=#{spoiler} where id=#{id}
    </update>

    <select id="findBySpoiler" resultType="Review">
        select * from review where spoiler > 0 order by asc
    </select>

<!--    상위몇프로 ?~ -->
    <update id="initializeRank">
        SET @rank := 0;
    </update>
    <select id="countTotalUsers" resultType="int">
        SELECT COUNT(DISTINCT user_id) FROM review;
    </select>
    <select id="getRankedReviews" resultType="ReviewRank">
        SELECT user_id, (@rank := @rank + 1) AS review_rank,
               FLOOR((@rank / (SELECT COUNT(DISTINCT user_id) FROM review)) * 100) AS review_percent
        FROM ( SELECT user_id, COUNT(*) AS review_count
        FROM review
        GROUP BY user_id
        ORDER BY review_count DESC) AS ranked_reviews;
    </select>


</mapper>