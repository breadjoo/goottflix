name: Deploy to Amazon EC2

on:
  push:
    branches: [ "main" ] # push가 될 때 워크플로우를 실행할 브랜치 리스트

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17' # 스프링부트 애플리케이션 자바 버전에 맞게
          distribution: 'zulu'
      - name: Clean build directory
        run: rm -rf build

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Check Secrets
        run: |
          echo "DOCKER_USERNAME is set as: ${{ secrets.DOCKER_USERNAME }}"

      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          chmod 600 .env

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


      # Docker 이미지 빌드 및 푸시
      - name: Docker build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64 # EC2 아키텍쳐에 맞게 (x86 = amd64, arm = arm64)
          push: true
          tags: ${{ secrets.DOCKER_REPO }}:latest
          no-cache: true

      # 서버에 배포
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          envs: GITHUB_SHA, ENV_FILE
          script: |
            echo "✅ 환경 변수 저장 (.env)"
            echo "${{ secrets.ENV_FILE }}" > /home/ubuntu/.env
            
            echo "✅ 기존 컨테이너 중지 및 삭제"
            sudo docker ps -q --filter "name=backend" | grep -q . && sudo docker stop backend && sudo docker rm backend || echo "No existing backend container."
            sudo docker ps -q --filter "name=frontend" | grep -q . && sudo docker stop frontend && sudo docker rm frontend || echo "No existing frontend container."

            echo "✅ 사용하지 않는 컨테이너 및 이미지 정리"
            sudo docker container prune -f
            sudo docker image prune -f
            
            sudo docker image rm -f ${{ secrets.DOCKER_REPO_BACKEND }}:latest || echo "backend 이미지가 없습니다."
            
            echo "✅ 최신 Docker 이미지 가져오기"
            sudo docker pull ${{ secrets.DOCKER_REPO_BACKEND }}:latest
            sudo docker pull ${{ secrets.DOCKER_REPO_FRONTEND }}:latest
            
            echo "✅ 새로운 컨테이너 실행"
            sudo docker compose up -d --build
            
            echo "✅ 현재 실행 중인 컨테이너 목록 확인"
            sudo docker ps -a
